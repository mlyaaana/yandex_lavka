// Code generated by MockGen. DO NOT EDIT.
// Source: yandex-team.ru/bstask/repository/order (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "yandex-team.ru/bstask/domain"
	order "yandex-team.ru/bstask/repository/order"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Atomic mocks base method.
func (m *MockRepository) Atomic(arg0 context.Context, arg1 func(order.Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atomic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Atomic indicates an expected call of Atomic.
func (mr *MockRepositoryMockRecorder) Atomic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atomic", reflect.TypeOf((*MockRepository)(nil).Atomic), arg0, arg1)
}

// CreateOrders mocks base method.
func (m *MockRepository) CreateOrders(arg0 context.Context, arg1 []*domain.Order) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockRepositoryMockRecorder) CreateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockRepository)(nil).CreateOrders), arg0, arg1)
}

// GetAssignedOrders mocks base method.
func (m *MockRepository) GetAssignedOrders(arg0 context.Context, arg1 domain.CourierId, arg2 time.Time) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedOrders indicates an expected call of GetAssignedOrders.
func (mr *MockRepositoryMockRecorder) GetAssignedOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedOrders", reflect.TypeOf((*MockRepository)(nil).GetAssignedOrders), arg0, arg1, arg2)
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(arg0 context.Context, arg1 domain.OrderId) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockRepository) GetOrders(arg0 context.Context, arg1 []domain.OrderId) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockRepositoryMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockRepository)(nil).GetOrders), arg0, arg1)
}

// GetUnassignedOrders mocks base method.
func (m *MockRepository) GetUnassignedOrders(arg0 context.Context, arg1 time.Time) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnassignedOrders", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnassignedOrders indicates an expected call of GetUnassignedOrders.
func (mr *MockRepositoryMockRecorder) GetUnassignedOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnassignedOrders", reflect.TypeOf((*MockRepository)(nil).GetUnassignedOrders), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockRepository) ListOrders(arg0 context.Context, arg1, arg2 int) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockRepositoryMockRecorder) ListOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockRepository)(nil).ListOrders), arg0, arg1, arg2)
}

// UpdateOrders mocks base method.
func (m *MockRepository) UpdateOrders(arg0 context.Context, arg1 []*domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockRepositoryMockRecorder) UpdateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockRepository)(nil).UpdateOrders), arg0, arg1)
}
